services:
  postgres:
    platform: linux/amd64
    image: postgres:14
    container_name: monitoring-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitor -d monitoring"] 
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    container_name: monitoring-mongo
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  migrations:
    image: migrate/migrate:v4.17.1
    command: 
      - "-path"
      - "/migrations"
      - "-database"
      - "postgres://monitor:securepass@postgres:5432/monitoring?sslmode=disable"
      - "up"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../migrations:/migrations
    healthcheck:
      test: ["CMD", "migrate", "-path", "/migrations", "-database", "$$POSTGRES_URL", "version"]
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 5s

  monitoring-center:
    build:
      context: ../monitoring-center  # Указываем путь к папке с Dockerfile
      dockerfile: Dockerfile
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      POSTGRES_URL: "postgres://monitor:securepass@postgres:5432/monitoring?sslmode=disable"
      MONGO_URL: "mongodb://root:example@mongodb:27017"
    ports:
      - "8080:8080"

  monitoring-agent:
    build: ../agent
    env_file:
      - .env
    environment:
      - HOST_ID=${HOST_ID}
      - MONITORING_CENTER_URL=${MONITORING_CENTER_URL}
      - POLLING_INTERVAL=${POLLING_INTERVAL}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT}
    volumes:
      - /:/host:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - monitoring-center
    restart: unless-stopped

volumes:
  pgdata:
  mongodata: